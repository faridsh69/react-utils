****************************************** React ******************************************
Goal: finding the best practices for final enterprise react application

++ A) Package: best practices
B) Microfrontend (main app, micro-services apps)

++ A) Package: best practices
+ 1) create package using vit for ui and utils
++ 2) initial config for a react app
    ++ eslint
    + prettier
    + huskey
    + i18next language
+ 3) basic components:
    + tooltip, Label (auto size and ...)
    + Loader, DataNotFound
    + button, text input, checkbox, radio, checklist, radiolist, chip
    + Image
    + Modal, Confirm
    + Popover: small div floating in ui,  menu => what ever we let user to have actions seleting
    + select => select input + virtualization
+ 4) utils:
    all custom hooks
    all helper methods
    managing all local storage keys
5) api handling
    react query
    useCrud
    toast, error handler, optimistic update, fast implementation, onSuccess and onError,
        do caching, manage query keys - createApiInstance, auto bearer inject, auto response change - auto error handling - refresh token - having types
6) Form best solution
    all the controllers
    validation bar
    array of inputs
    custom (actually has controller inside)

B) Microfrontend (main app, micro-services apps)

1) structure
    implement using vit, cons pros
    implement using pure react
    implement using craco
    implement using other tools
    implement full version with handling
2) react router dom
3) language i18

****************************************** Clean code ******************************************

1) Readablity: easy to read, easy to understand, code should talk to you
    - easy to debug
    - easy to maintain: easy to change
    - easy to develop or extend
